@page "/trip/{Id}"
@using Travel.Interfaces
@using Travel.Areas.Identity.Data
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment  WebHostingEnviroment
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPersonDataService PersonData
@inject ITripDataService TripService
@inject IPersonTripDataService PerosnTripService





<section class="portfolio-block project">
    <div class="container">
        <div class="heading">
            <h2>@TripName</h2>
        </div>
        <div class="image" style="background-image:url('@PictureLocation');"></div>
        <div class="row">
            <div class="col-12 col-md-6 offset-md-1 info">
                <h3>Description</h3>
                <p>@TripShortDescription</p>
                <p>@TripDetails</p>
            </div>
            <div class="col-12 col-md-3 offset-md-1 meta">
                <div class="tags">
                    <span class="meta-heading">Price: @TripPrice $</span>
                    <span class="meta-heading">Country: @TripCountry</span>
                    <span class="meta-heading">City: @TripCity</span>
                    <span class="meta-heading">Date : @TripDate</span>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    [Parameter]
    public string Id { get; set; }

    public Travel.Areas.Identity.Data.Trip ATrip { get; set; }

    public string TripName { get; set; }

    public string PictureLocation { get; set; }

    public string TripCountry { get; set; }

    public string TripCity { get; set; }

    public string TripDate { get; set; }

    public string TripShortDescription { get; set; }

    public string TripDetails { get; set; }

    public string TripPrice { get; set; }



    private AuthenticationState authState { get; set; }

    private Person Person { get; set; }

    public string BookText { get; set; }


    protected override async Task OnInitializedAsync()
    {


        ATrip = await TripService.GetTrip(Id);
        if (ATrip != null)
        {
            TripName = ATrip.Name;
            PictureLocation = ATrip.PictureLocation;
            TripCountry = ATrip.Country;
            TripCity = ATrip.City;
            TripDate = ATrip.Date.ToString();
            TripShortDescription = ATrip.ShortDescription;
            TripDetails = System.IO.File.ReadAllText(WebHostingEnviroment.WebRootPath + ATrip.Details);
            TripPrice = ATrip.Price.ToString();

        }
        else
        {
            NavigationManager.NavigateTo("trips");
        }
    }

    protected async Task<Boolean> IsAuthenticated()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity.IsAuthenticated;
    }

    protected async Task<Person> GetCurrentPerson()
    {
        var user = authState.User;
        return await PersonData.GetPerson(userName: user.Identity.Name);

    }

    protected Boolean IsPeronIsBookingThisTrip(Person person)
    {
        List<Travel.Areas.Identity.Data.Trip> trips = PerosnTripService.GetTrips(person);
        if (trips.Count != 0)
        {
            if (trips.Contains(ATrip))
            {
                return true;
            }
        }
        return false;
    }


    protected async Task Book()
    {

        if (await IsAuthenticated())
        {
            Person = await GetCurrentPerson();

            if (IsPeronIsBookingThisTrip(Person))
            {

            }
            else
            {
                await PerosnTripService.AddPersonTrip(Person, ATrip);
                BookText = "Booked";
            }

        }
        else
        {
            NavigationManager.NavigateTo("authorizationrequired");
        }

    }


    protected void Unbook()
    {
        PerosnTripService.DeletePersonTrip(Person, ATrip);
        BookText = "Book";


    }
}
